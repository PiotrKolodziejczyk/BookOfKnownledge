Nawiązywanie połączenia TCP Klient (Próba nawiązania połączenia na danym porcie jako klient)<;TcpClient client = new TcpClient(ip,port); client.Close();;>Receptura 5.1. str 55
Serwer TCP (Tworzy serwer TCP nasłuchujący na danym porcie)<;private TcpListener server; private TcpClient client; server=new TcpListener(ip,port); server.Start(); client=server.AcceptTcpClient(); client.Close(); server.Stop();;>Receptura 5.3. str 58
Odczytywanie adresu IP przyłączonego hosta (Odczytuje ip hosta który nawiązał znami połączenie, kod z Serwer TCP i pomiędzy client accept a client close wstawić)<;IPEndPoint IP = (IPEndPoint)client.Client.RemoteEndPoint;;>Receptura 5.5. str 60
Połączenie UDP Klient (Wysyła dane jako klient udp nie nawiązuje połączenia)<;UdpClient client = new UdpClient(ip,port); byte[] data = Encoding.ASCII.GetBytes("Daneeeeejakies"); client.Send(data,data.Lenght); client.Close();;>Receptura 5.6. str 62
Serwer UDP (Odbiera dane UDP)<;IPEndPoint zdalnyIP = new IPEndPoint(IPAddress.Any,0);UdpClient server = new UdpClient(port); Byte[] read = server.Receive(ref zdalnuIP); string data = Encoding.ASCII.GetString(read); server.Close();;>Receptura 5.7. str 63
Asynchroniczne połączenie TCP (Nawiązuje połączenie TCP bez blokowania UI)<;private TcpListener server;private TcpClient client;private void AcceptTcpClientCallback(IAsyncResult asyncResult){TcpListener s =(TcpListener)asyncResult.AsyncState; client.EndAcceptTcpClient(asyncResult);client.Stop();server.Stop();} server = new TcpListener(Ip,port); server.Start(); server.BeginAcceptTcpClient(new AsyncCallback(AcceptTcpClientCallback),server);;>Receptura 5.8. str 65
Dostęp do kontrolki z innego wątku (uzyskujemy bezpieczny dostęp do danej kontrolki z innego wątku)<;private delegate void SetTextCallBack(string text); private void SetListBoxText(string text){if(listBox1.InvokeRequired){SetTextCallBack f = new SetTextCallBack(SetListBoxText); this.Invoke(f, new object[] {text});}else{listBox1.Items.Add(text)};>Receptura 5.10. str 66
Komplet informacji na temat połączeń sieciowych (Pokazuje wszystkie informacje o połączeniach sieciowych)<;;>Receptura 5.16. str 72
Wysyłanie Pingu (wysyła ping i sprawdza czy doszedł)<;;>Receptura 5.19. str 76
Asynchroniczne wysłanie pingu (Wysyła ping i nie blokuje UI)<;;>Receptura 5.21. str 78
Protokół HTTP (Sprawdza dostępne uaktualnienia poprzez ściągniecie pliku i odczytanie go)<;WebRequest rq = WebRequest.Create("adres strony"); rq.Credentials = CredentialsCache.DefaultCredentials; HttpWebResponse rp =(HttpWebResponse)rq.GetResponse(); Stream stream = rp.GetResponseStream(); StreamReader reader =new StreamReader(stream); string odpowiedz = reader.ReadToEnd();;>Receptura 5.29. str 85
Pobieranie pliku z użyciem HTTP (Pobiera plik jezeli w projekcie Protokół HTTP są uaktualnienia ,używamy kodu z tego projektu)<;Webclient client = new WebClient(); client.DownloadFile("adres pliku na stronie");;>Receptura 5.30. str 86
Pobieranie źródła strony z serwera WWW (Pobiera strone internetową HTML)<;WebRequest task = WebRequest.Create(http;//+path); task.Credentials = CredentialsCache.DefaultCredentials; HttpWebResponse rs = (HttpWebResponse)task.GetResponse(); string s = rs.ContentEncoding; Stream stream = rs.GetResponseStream(); StreamReader reader = new StreamReader(stream,Encoding.Default,false); string text = reader.ReadToEnd();;>Receptura 5.31. str 88
Klient FTP metoda pobierająca plik asynchronicznie (Pobiera plik asynchronicznie)<;;>Receptura 5.73. str 125
Klient FTP metoda wysyłająca plik asynchronicznie (Wysyła plik asynchronicznie)<;;>Receptura 5.77. str 127
Wyświetlania zawartośći pliku XML (Wyświetla plik XML)<;;>Receptura 7.13. str 227
